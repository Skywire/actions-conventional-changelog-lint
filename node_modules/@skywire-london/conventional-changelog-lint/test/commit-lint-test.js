var expect = require('chai').expect
let linter = require('../commit-lint');

/**
 * Expected format:
 * starts with DD# (case sensitive)
 * Followed by integer
 * followed by colon
 * followed by single space
 * followed by commit type
 * Followed by bracketed string (optional)
 * Followed by colon
 * Followed by space
 * #Followed by single space
 * Followed by string
 */

let validMessage = 'DD#1234: feat(skywire_test): create test module';

describe('Commit Lint', function () {

    describe('Check format', function () {
        it('should return true if format is correct', function () {

            let message = 'SKY-001: feat(skywire_test): create test module';
            expect(linter.validateFormat(message)).to.be.true;
        });
    });

    describe('ClickUp missing', function () {
        it('should raise error if ClickUp ID is missing', function () {

            let message = 'feat(skywire_test): create test module'
            expect(() => {
                linter.lint(message)
            }).to.throw(Error, 'Missing or invalid ticket number e.g. SKY-001');
        });
    });

    describe('Commit type missing', function () {
        it('should raise error if commit type is missing', function () {

            let message = 'SKY-001: (skywire_test): create test module'
            expect(() => {
                linter.lint(message)
            }).to.throw(Error, 'Missing commit type');
        });
    });

    describe('Description missing', function () {
        it('should raise error if description is missing', function () {

            let message = 'SKY-001: feat(skywire_test): ';
            expect(() => {
                linter.lint(message)
            }).to.throw(Error, 'Missing description');
        });
    });

    describe('Valid message', function () {
        it('should return true when the commit message is valid', function () {

            let message = 'SKY-001: feat(skywire_test): create test module'
            expect(linter.lint(message)).to.be.true;
        });
    });

});
